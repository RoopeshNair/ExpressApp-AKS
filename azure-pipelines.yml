# Deploy to Kubernetes
# Build a Docker image, push to an Azure Container Registry, and deploy it to Azure Kubernetes Service.
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation - Docker Hub/ACR/...
  dockerRegistryServiceConnection: '98924591-f544-40c3-9daa-18fd6cfd0402'
  imageRepository: 'express-aks'
  containerRegistryName: 'ronacr.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  
  # Kubernetes Namespace
  k8sNamespace: 'default'
  imagePullSecret: 'atulmakshelm-auth'

  # Agent Pool Name
  poolName: 'Hosted Ubuntu 1604'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool: $(poolName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    
    - task: CopyFiles@2
      displayName: 'Copy Files to artifact staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)'
        Contents: '**/manifests/*.*'
        TargetFolder: $(Build.ArtifactStagingDirectory)

    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'drop'
        targetPath: 'manifests/*'

- stage: test
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    displayName: deploy&test
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'smarthotel-dev.default'   # creates an environment if it doesn’t exist
    strategy: 
      runOnce:
        deploy:                     # records deployments against ‘smarthotel-dev’
          steps:
          - script: echo deploy to test
          - script: echo run tests

- stage: SecurityTests
  dependsOn: Build
  jobs:
  - deployment: DeployWeb
    displayName: runSecurityTests
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'smarthotel-test.bookings'   # creates an environment if it doesn’t exist
    strategy: 
      runOnce:
        deploy:                     # records deployments against ‘smarthotel-dev’
          steps:
          - script: echo deploy to test
          - script: echo run tests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: 
  - Test
  - SecurityTests
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool: 'Hosted Ubuntu 1604'
    environment: 'smarthotel-prod.bookings'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@1
            inputs:
              buildType: 'current'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: $(k8sNamespace)
              manifests: |
                $(System.ArtifactsDirectory)/**/manifests/*
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistryName)/$(imageRepository):$(tag)
